// {
//     "version": "2.0.0",
//     "tasks": [{
//         "label": "Compile", // 任务名称，与launch.json的preLaunchTask相对应
//         "command": "gcc",   // 要使用的编译器，C++用g++
//         "args": [
//             "${file}",
//             "-o",    // 指定输出文件名，不加该参数则默认输出a.exe，Linux下默认a.out
//             "${fileDirname}/${fileBasenameNoExtension}.exe",
//             "-g",    // 生成和调试有关的信息
//             "-Wall", // 开启额外警告
//             "-static-libgcc",     // 静态链接libgcc，一般都会加上
//             "-fexec-charset=GBK", // 生成的程序使用GBK编码，不加这一条会导致Win下输出中文乱码
//             // "-std=c11", // C++最新标准为c++17，或根据自己的需要进行修改
//         ], // 编译的命令，其实相当于VSC帮你在终端中输了这些东西
//         "type": "process", // process是vsc把预定义变量和转义解析后直接全部传给command；shell相当于先打开shell再输入命令，所以args还会经过shell再解析一遍
//         "group": {
//             "kind": "build",
//             "isDefault": true // 不为true时ctrl shift B就要手动选择了
//         },
//         "presentation": {
//             "echo": true,
//             "reveal": "always", // 执行任务时是否跳转到终端面板，可以为always，silent，never。具体参见VSC的文档
//             "focus": false,     // 设为true后可以使执行task时焦点聚集在终端，但对编译C/C++来说，设为true没有意义
//             "panel": "shared"   // 不同的文件的编译信息共享一个终端面板
//         },
//         // "problemMatcher":"$gcc" // 此选项可以捕捉编译时终端里的报错信息；但因为有Lint，再开这个可能有双重报错
//     }]
// }

{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "build", //task的名字,调用方式就是 task build  
            "command": "mingw32-make.exe", //会在命令行中调用此命令  
            "args": [ //调用上述 mingw32-make.exe 传递给它的参数  
                "target=${workspaceRootFolderName}.exe" //${workspaceRootFolderName} 会被替换成 根目录 即:vscode_c_demo            
            ],
            "type": "shell",
            "problemMatcher": []
        }, //此命令等效展开:mingw32-make.exe target=vscode_c_demo.exe        
        {
            "label": "build-debug",
            "command": "mingw32-make.exe",
            "args": [
                "target=${workspaceRootFolderName}.exe",
                "DEBUG=-g", //添加debug 参数 使gcc 生成调试信息
                "PREDEF=Debug" //相当于在程序中定义了一个宏定义#define Debug            
            ],
            "type": "shell"
        }, //此命令等效展开为:mingw32-make.exe target=vscode_c_demo.exe DEBUG=-g PREDEF=Debug        
        {
            "label": "clean",
            "command": "mingw32-make.exe",
            "args": [
                "clean",
                //"target=${workspaceRootFolderName}.exe"
            ],
            "type": "shell",
            "problemMatcher": []
        }, //此命令等效展开为:mingw32-make.exe clean target=vscode_c_demo.exe        
        {
            "label": "runing",
            "command": "./runExcute.sh",
            "args": [
                "${workspaceRootFolderName}.exe" // 传给脚本的参数            
            ],
            "type": "shell"
        }, //此命令等效展开为:mingw32-make.exe target=vscode_c_demo.exe  然后执行 ./vscode_c_demo.exe    
        {
            "label": "g++",
            "type": "shell",
            "command": "g++",
            "args": ["-g","${file}","-o","${fileBasenameNoExtension}.exe"], // 编译命令参数
            "problemMatcher": {
                "owner": "cpp",
                "fileLocation": ["relative", "${workspaceRoot}"],
                "pattern": {
                    "regexp": "^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$",
                    "file": 1,
                    "line": 2,
                    "column": 3,
                    "severity": 4,
                    "message": 5
                }
            }
        }
    ]
}